service: seemy-github

frameworkVersion: '2'

useDotenv: true
plugins:
  - serverless-plugin-typescript
  - serverless-jetpack
  # - serverless-offline-ssm-provider
  - serverless-dynamodb-local
  - serverless-offline-sqs
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-2
  stage: production
  versionFunctions: false
  tags:
    seemyintegration: github
    seemycomponent: vcs
    service: seemy
  iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "sqs:SendMessage"
        Resource: 
          - Fn::GetAtt:
            - PageQueue
            - Arn
      - Effect: "Allow"
        Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        Resource: 
          - Fn::GetAtt:
            - pullTable
            - Arn
          - Fn::GetAtt:
            - issueTable
            - Arn

  environment:
    PAGE_QUEUE: http://127.0.0.1:9324/queue/${self:custom.queueNames.pageQueue}
    PULL_TABLE: ${self:custom.tableNames.pullTable}
    ISSUE_TABLE: ${self:custom.tableNames.issueTable}
    appId: ${env:appId}
    privateKey: ${env:privateKey}
    DEBUG: "*"
    AWS_ACCOUNT_ID: "#{AWS::AccountId}"
    AWS_DEPLOY_REGION: ${self:provider.region}
    SERVICE: ${self:service}


functions:
  pageQueueHandler:
    handler: src/inputHandler.sqsPageQueueHandler
    maximumRetryAttempts: 2
    timeout: 900
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - PageQueue
              - Arn

  http:
    handler: src/inputHandler.httpQueryRepoHandler
    events:
      - httpApi:
          path: /{installationId}/{owner}/{repo}
          method: GET

package:
  exclude:
    - "tests/**"
    - "*.md"
    - "wallaby.js"
    - "jest.config.js"
    - "workspace.code-workspace/**"
    - "package-lock.json"
    - "node_modules/aws-sdk/**"
    - "coverage/**"
    - ".*"
    - ".*/**"

resources:
  Resources:

    PageQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: seemyGithubPageDLQ

    PageQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueNames.pageQueue}
        VisibilityTimeout: 1
        # FifoQueue: true
        # ContentBasedDeduplication: true
        # RedrivePolicy:
        #   deadLetterTargetArn: !GetAtt PageQueueDLQ.Arn

    pullTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNames.pullTable}
        KeySchema:
          - AttributeName: url
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: url
            AttributeType: S
          - AttributeName: id
            AttributeType: "N"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 2
    issueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNames.issueTable}
        KeySchema:
          - AttributeName: url
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: url
            AttributeType: S
          - AttributeName: id
            AttributeType: "N"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 2

custom:
  serverless-jetpack:
    mode: npm

  dynamodb:
    noStart: true

  queueNames:
    pageQueue: seemyGithubPage

  tableNames:
    issueTable: seemyVCSissue
    pullTable: seemyVCSpull

    stages:
      - production
    start:
      migrate: true

  serverless-offline:
    httpPort: 3223

  serverless-offline-sqs:
    endpoint: http://localhost:9324
    region: eu-west-2
    skipCacheInvalidation: false
    accessKeyId: x
    secretAccessKey: x
    autoCreate: true